#version 460
#extension GL_KHR_shader_subgroup_basic: enable
#extension GL_KHR_shader_subgroup_arithmetic: enable
#extension GL_KHR_shader_subgroup_shuffle_relative: enable

layout (constant_id = 0) const int rows = 1;
layout (local_size_x_id = 1) in;

layout (push_constant) uniform PushConstants {
    uint start;
    uint n;
} info;


// Matrices stored in column-major format
layout(std430, binding = 0) readonly buffer bufA { double a[]; };
layout(std430, binding = 1) writeonly buffer bufC { double c[]; };
layout(std430, binding = 2) readonly buffer bufOffsets { uint offsets[]; };


void invert_1x1(uint i) {
    c[i] = 1.0/a[i];
}

void invert_2x2(uint i) {
    dmat2 m2 = dmat2(dvec2(a[i], a[i+1]), dvec2(a[i+2], a[i+3]));
    m2 = inverse(m2);
    // write
    c[i] = m2[0][0];
    c[i+1] = m2[0][1];
    c[i+2] = m2[1][0];
    c[i+3] = m2[1][1];
}

void invert_3x3(uint i) {
    dmat3 m3 = dmat3(
        dvec3(a[i], a[i+1], a[i+2]),
        dvec3(a[i+3], a[i+4], a[i+5]),
        dvec3(a[i+6], a[i+7], a[i+8])
    );

    m3 = inverse(m3);
    // write
    for (uint col = 0; col < 3; col++) {
        c[i+col*rows] = m3[col][0];
        c[i+col*rows+1] = m3[col][1];
        c[i+col*rows+2] = m3[col][2];
    }
}

void invert_4x4(uint i) {
    dmat4 m4 = dmat4(
        dvec4(a[i], a[i+1], a[i+2], a[i+3]),
        dvec4(a[i+4], a[i+5], a[i+6], a[i+7]),
        dvec4(a[i+8], a[i+9], a[i+10], a[i+11]),
        dvec4(a[i+12], a[i+13], a[i+14], a[i+15])
    );

    m4 = inverse(m4);

    // write
    for (uint col = 0; col < 4; col++) {
        c[i+col*rows] = m4[col][0];
        c[i+col*rows+1] = m4[col][1];
        c[i+col*rows+2] = m4[col][2];
        c[i+col*rows+3] = m4[col][3];
    }     
}

void invert_matrix_at(uint i) {
        switch (rows) {
            case 1:
                invert_1x1(i);
                break;
            case 2:
                invert_2x2(i);
                break;
            case 3:
                invert_3x3(i);
                break;
            case 4:
                invert_4x4(i);
                break;
            default:
                break;
        }
}

void main() {

    const uint idx = gl_GlobalInvocationID.x;
    if (idx >= info.n) {
        return;
    }
    uint i = offsets[info.start + idx];
    invert_matrix_at(i);

}