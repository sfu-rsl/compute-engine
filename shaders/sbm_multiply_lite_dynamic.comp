#version 460

layout (constant_id = 0) const int rows_a = 1;
layout (constant_id = 1) const int cols_a = 1;

layout (constant_id = 2) const int rows_b = 1;
layout (constant_id = 3) const int cols_b = 1;

layout (local_size_x_id = 4) in;

layout (constant_id = 5) const bool add = true;
layout (constant_id = 6) const bool transpose_right = false;

layout (push_constant) uniform PushConstants {
    uint start;
    uint n;
} ml_info;


// Matrices stored in column-major format
layout(std430, binding = 0) readonly buffer bufDestIdx { uint dest_idx[]; };
layout(std430, binding = 1) buffer bufDestData { double dest_data[]; };

layout(std430, binding = 2) readonly buffer bufLeftIdx { uvec2 left_idx[]; };
layout(std430, binding = 3) readonly buffer bufLeftPtr { uint left_ptr[]; };
layout(std430, binding = 4) readonly buffer bufLeftData { double left_data[]; };

layout(std430, binding = 5) readonly buffer bufRightIdx { uvec2 right_idx[]; };
layout(std430, binding = 6) readonly buffer bufRightPtr { uint right_ptr[]; };
layout(std430, binding = 7) readonly buffer bufRightData { double right_data[]; };



const uint szml = 3;
const uint dest_info_size = 3;

uint get_row(uint idx) {
    return dest_idx[idx*dest_info_size];
}

uint get_col(uint idx) {
    return dest_idx[idx*dest_info_size+1];
}

uint get_offset(uint idx) {
    return dest_idx[idx*dest_info_size+2];
}

const int szc = rows_a*cols_b;

void mulAB(const uint off_a, const uint off_b, const uint c_row, const uint c_col, inout double value) {

    for (int v = 0; v < cols_a; v++) {
        if (transpose_right) {
            if (add) {
            value += left_data[c_row+v*rows_a + off_a]*right_data[v*cols_b+c_col + off_b];
            }
            else {
                value -= left_data[c_row+v*rows_a + off_a]*right_data[v*cols_b+c_col + off_b];
            }
        }
        else {
            if (add) {
                value += left_data[c_row+v*rows_a + off_a]*right_data[v+c_col*rows_b + off_b];
            }
            else {
                value -= left_data[c_row+v*rows_a + off_a]*right_data[v+c_col*rows_b + off_b];
            }
        }
    }

}

void main() {

    // Should not be necessary if properly dispatched
    const uint ml_idx = gl_WorkGroupID.x;
    if (ml_idx >= ml_info.n) {
        return;
    }
    const uint elem = gl_LocalInvocationID.x;
    if (elem >= szc) {
        return;
    } 

    const uint block_row = get_row(gl_WorkGroupID.x);
    const uint block_col = get_col(gl_WorkGroupID.x);

    uint start = left_ptr[block_row];
    const uint items = left_ptr[block_row+1]-start;


    const uint off_c = get_offset(ml_idx);

    const uint c_row = elem % rows_a;
    const uint c_col = elem / rows_a;

    double value = 0.0;
    double current = dest_data[c_row + c_col*rows_a + off_c];

    const uint end = start+items;
    const uint jstart = right_ptr[block_col];
    const uint jend =  right_ptr[block_col+1];
    uint j = jstart;

    for (uint i = start; i < end && j < jend;) {
        const uvec2 l = left_idx[i];
        const uvec2 r = right_idx[j];

        if (l.x == r.x) {
            mulAB(l.y, r.y, c_row, c_col, value);
            i++;
            j++;
        }
        else if (l.x < r.x) {
            i++;
        }
        else {
            j++;
        }
    }

    dest_data[c_row + c_col*rows_a + off_c] = value + current;

}