#version 460
// #extension GL_KHR_shader_subgroup_basic: enable
// #extension GL_KHR_shader_subgroup_arithmetic: enable
// #extension GL_KHR_shader_subgroup_shuffle_relative: enable

layout (constant_id = 0) const int rows_a = 1;
layout (constant_id = 1) const int cols_a = 1;

layout (constant_id = 2) const int rows_b = 1;
layout (constant_id = 3) const int cols_b = 1;

layout (local_size_x_id = 4) in;

layout (constant_id = 5) const bool add = true;
// layout (constant_id = 6) const bool transpose_right = false;

layout (push_constant) uniform PushConstants {
    uint start;
    uint n;
} ml_info;


// Matrices stored in column-major format
layout(binding = 0) readonly buffer bufA { double a[]; };
layout(binding = 1) readonly buffer bufB { double b[]; };
layout(binding = 2) writeonly buffer bufC { double c[]; };
layout(binding = 3) readonly buffer bufMulPairs {uvec2 mul_pairs[]; };


double mulAB(const uint off_a, const uint off_b, const uint ra, const uint cb) {

    double value = 0.0;
    for (int v = 0; v < cols_a; v++) {
        value += a[ra+v*rows_a + off_a]*b[v+cb*rows_b + off_b];
    }
    if (add) {
        return value;
    }
    else {
        return -value;
    }
        
}

const int szc = rows_a*cols_b;
void main() {

    uint idx = gl_GlobalInvocationID.x / szc;
    if (idx >= ml_info.n) {
        return;
    }

    const uint elem = gl_GlobalInvocationID.x % szc;
    const uint c_row = elem % rows_a;
    const uint c_col = elem / rows_a;

    const uvec2 pair = mul_pairs[ml_info.start + idx];

    // only difference is that BDM on right uses pair.x as the write offset since
    // result has structure of A (left)
    // while BDM on the left uses pair.y since result has structure of B (right) 
    c[c_row + c_col*rows_a + pair.x] = mulAB(pair.x, pair.y, c_row, c_col);  // TODO: Unify with other shader if possible
    // writeTotal(pair.y);


}